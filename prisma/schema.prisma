generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tool {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  link        String?
  order       Int?
  categoryId  Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  bookmark    Bookmark[]
  Category    Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([description])
  @@index([icon])
  @@index([link])
  @@index([order])
}

model User {
  id        Int        @id @default(autoincrement())
  email     String
  password  String
  firstname String?
  lastname  String?
  username  String
  active    Boolean    @default(false)
  website   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  bookmark  Bookmark[]
  Image     Image?

  @@index([email])
  @@index([password])
  @@index([firstname])
  @@index([lastname])
  @@index([username])
  @@index([active])
  @@index([website])
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  link        String?
  userId      Int?
  toolId      Int?
  createdAt   DateTime @default(now())
  imgLink     String?
  updatedAt   DateTime @default(now()) @updatedAt
  tool        Tool?    @relation(fields: [toolId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([description])
  @@index([link])
  @@index([imgLink])
}

model ToolsOnUsers {
  userId    Int
  toolId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, toolId])
}

model Token {
  id              Int     @id @default(autoincrement())
  jwtRefreshToken String?
  expiration      String?
  emailToken      String
  userId          Int

  @@index([jwtRefreshToken])
  @@index([expiration])
  @@index([emailToken])
}

model Image {
  id       Int    @id @default(autoincrement())
  fileName String @unique
  filePath String
  mimeType String
  size     BigInt
  userId   Int?   @unique
  User     User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([fileName])
  @@index([filePath])
  @@index([mimeType])
  @@index([size])
  @@index([userId])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  order       Int?     @default(999)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  Tool        Tool[]

  @@index([name])
  @@index([description])
  @@index([order])
}
